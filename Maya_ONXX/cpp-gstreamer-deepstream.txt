#include <gst/gst.h>
#include <iostream>
#include <string>

static void error_cb(GstBus *bus, GstMessage *msg, gpointer user_data) {
    GError *err;
    gchar *debug_info;
    
    gst_message_parse_error(msg, &err, &debug_info);
    g_printerr("Error received from element %s: %s\n", GST_OBJECT_NAME(msg->src), err->message);
    g_printerr("Debugging information: %s\n", debug_info ? debug_info : "none");
    
    g_clear_error(&err);
    g_free(debug_info);
    
    GMainLoop *loop = (GMainLoop *)user_data;
    g_main_loop_quit(loop);
}

static void eos_cb(GstBus *bus, GstMessage *msg, gpointer user_data) {
    g_print("End-Of-Stream reached.\n");
    GMainLoop *loop = (GMainLoop *)user_data;
    g_main_loop_quit(loop);
}

static void state_changed_cb(GstBus *bus, GstMessage *msg, gpointer user_data) {
    GstState old_state, new_state, pending_state;
    gst_message_parse_state_changed(msg, &old_state, &new_state, &pending_state);
    
    // Only print state changes for the pipeline
    if (GST_MESSAGE_SRC(msg) == GST_OBJECT(user_data)) {
        g_print("Pipeline state changed from %s to %s\n",
               gst_element_state_get_name(old_state), 
               gst_element_state_get_name(new_state));
    }
}

static gboolean bus_call(GstBus *bus, GstMessage *msg, gpointer data) {
    GMainLoop *loop = (GMainLoop *)data;
    
    switch (GST_MESSAGE_TYPE(msg)) {
        case GST_MESSAGE_EOS:
            g_print("End of stream\n");
            g_main_loop_quit(loop);
            break;
            
        case GST_MESSAGE_ERROR: {
            gchar *debug;
            GError *error;
            
            gst_message_parse_error(msg, &error, &debug);
            g_free(debug);
            
            g_printerr("Error: %s\n", error->message);
            g_error_free(error);
            
            g_main_loop_quit(loop);
            break;
        }
        default:
            break;
    }
    
    return TRUE;
}

int main(int argc, char *argv[]) {
    GstElement *pipeline, *source, *capsfilter1, *videoconvert, *nvvidconv1, 
               *capsfilter2, *streammux, *nvinfer, *nvvidconv2, *tiler,
               *nvvidconv3, *nvosd, *nvvidconv4, *capsfilter3, *sink;
               
    /* Additional queue elements for buffering */
    GstElement *queue1, *queue2, *queue3, *queue4, *queue5, *queue6;
               
    GstCaps *caps1, *caps2, *caps3;
    GstBus *bus;
    GMainLoop *loop;
    
    /* Initialize GStreamer */
    gst_init(&argc, &argv);
    
    /* Create the elements */
    pipeline = gst_pipeline_new("deepstream-yolo-pipeline");
    
    source = gst_element_factory_make("v4l2src", "camera-source");
    capsfilter1 = gst_element_factory_make("capsfilter", "src-caps");
    GstElement *jpegdec = gst_element_factory_make("jpegdec", "jpeg-decoder");
    videoconvert = gst_element_factory_make("videoconvert", "videoconvert");
    
    /* Create queue elements */
    queue1 = gst_element_factory_make("queue", "queue1");
    queue2 = gst_element_factory_make("queue", "queue2");
    queue3 = gst_element_factory_make("queue", "queue3");
    queue4 = gst_element_factory_make("queue", "queue4");
    queue5 = gst_element_factory_make("queue", "queue5");
    queue6 = gst_element_factory_make("queue", "queue6");
    nvvidconv1 = gst_element_factory_make("nvvideoconvert", "nvvidconv1");
    capsfilter2 = gst_element_factory_make("capsfilter", "nvmm-caps");
    streammux = gst_element_factory_make("nvstreammux", "stream-muxer");
    nvinfer = gst_element_factory_make("nvinfer", "primary-inference");
    nvvidconv2 = gst_element_factory_make("nvvideoconvert", "nvvidconv2");
    tiler = gst_element_factory_make("nvmultistreamtiler", "tiler");
    nvvidconv3 = gst_element_factory_make("nvvideoconvert", "nvvidconv3");
    nvosd = gst_element_factory_make("nvdsosd", "nvosd");
    nvvidconv4 = gst_element_factory_make("nvvideoconvert", "nvvidconv4");
    capsfilter3 = gst_element_factory_make("capsfilter", "display-caps");
    sink = gst_element_factory_make("nveglglessink", "nvvideo-renderer");
    
    if (!pipeline || !source || !capsfilter1 || !jpegdec || !videoconvert || !nvvidconv1 || 
        !capsfilter2 || !streammux || !nvinfer || !nvvidconv2 || !tiler ||
        !nvvidconv3 || !nvosd || !nvvidconv4 || !capsfilter3 || !sink ||
        !queue1 || !queue2 || !queue3 || !queue4 || !queue5 || !queue6) {
        g_printerr("One or more elements could not be created. Exiting.\n");
        return -1;
    }
    
    /* Set properties */
    g_object_set(G_OBJECT(source), 
                "device", "/dev/video0", 
                "io-mode", 4,  // Use memory mapped mode
                NULL);
    
    // Set video format to MJPG, 1920x1080 at 30 fps
    caps1 = gst_caps_new_simple("image/jpeg",
                              "width", G_TYPE_INT, 1920,
                              "height", G_TYPE_INT, 1080,
                              "framerate", GST_TYPE_FRACTION, 30, 1,
                              NULL);
    g_object_set(G_OBJECT(capsfilter1), "caps", caps1, NULL);
    gst_caps_unref(caps1);
    
    // Set NVMM format
    caps2 = gst_caps_new_simple("video/x-raw",
                              "width", G_TYPE_INT, 1920,
                              "height", G_TYPE_INT, 1080,
                              "format", G_TYPE_STRING, "RGBA",
                              "framerate", GST_TYPE_FRACTION, 30, 1,
                              NULL);
    // Adding memory features for NVMM
    GstCapsFeatures *features = gst_caps_features_new("memory:NVMM", NULL);
    gst_caps_set_features(caps2, 0, features);
    g_object_set(G_OBJECT(capsfilter2), "caps", caps2, NULL);
    gst_caps_unref(caps2);
    
    // Configure streammux with optimized settings
    g_object_set(G_OBJECT(streammux), 
                 "batch-size", 1, 
                 "width", 1920, 
                 "height", 1080,
                 "batched-push-timeout", 400000,  // Increased timeout
                 "live-source", TRUE,  // Important for camera sources
                 "buffer-pool-size", 8,  // Increase buffer pool size
                 NULL);
                 
    // Configure queue elements with larger buffers
    for (GstElement* queue : {queue1, queue2, queue3, queue4, queue5, queue6}) {
        g_object_set(G_OBJECT(queue), 
                    "max-size-buffers", 30,
                    "max-size-time", 0,
                    "max-size-bytes", 0,
                    "leaky", 2,  // Leak downstream (newer buffers preferred)
                    NULL);
    }
    
    // Configure nvinfer element with YOLO config
    g_object_set(G_OBJECT(nvinfer), 
                 "config-file-path", "/root/DeepStream-Yolo/config_infer_primary_yoloV8.txt",
                 "batch-size", 1,
                 "gpu-id", 0,
                 NULL);
                 
    // Configure all nvvideoconvert elements to use CUDA device memory
    for (GstElement* nvconv : {nvvidconv1, nvvidconv2, nvvidconv3, nvvidconv4}) {
        g_object_set(G_OBJECT(nvconv), 
                    "nvbuf-memory-type", 2,  // Use CUDA device memory
                    NULL);
    }
    
    // Configure tiler
    g_object_set(G_OBJECT(tiler), 
                 "width", 1280, 
                 "height", 720,
                 "gpu-id", 0,
                 NULL);
                 
    // Configure sink with optimized parameters to prevent dropping
    g_object_set(G_OBJECT(sink), 
                 "sync", FALSE,        // Disable sync to avoid dropping frames
                 "async", FALSE,       // Disable async state changes
                 "qos", FALSE,         // Disable quality of service
                 "max-lateness", -1,   // Process frames regardless of lateness
                 NULL);
    
    // Set final display caps at 1280x720
    caps3 = gst_caps_new_simple("video/x-raw",
                              "width", G_TYPE_INT, 1280,
                              "height", G_TYPE_INT, 720,
                              "format", G_TYPE_STRING, "RGBA",
                              NULL);
    // Adding memory features for NVMM
    GstCapsFeatures *features3 = gst_caps_features_new("memory:NVMM", NULL);
    gst_caps_set_features(caps3, 0, features3);
    g_object_set(G_OBJECT(capsfilter3), "caps", caps3, NULL);
    gst_caps_unref(caps3);
    
    /* Create the main loop */
    loop = g_main_loop_new(NULL, FALSE);
    
    /* Add message handlers */
    bus = gst_pipeline_get_bus(GST_PIPELINE(pipeline));
    gst_bus_add_signal_watch(bus);
    g_signal_connect(G_OBJECT(bus), "message::error", G_CALLBACK(error_cb), loop);
    g_signal_connect(G_OBJECT(bus), "message::eos", G_CALLBACK(eos_cb), loop);
    g_signal_connect(G_OBJECT(bus), "message::state-changed", G_CALLBACK(state_changed_cb), pipeline);
    gst_bus_add_watch(bus, bus_call, loop);
    gst_object_unref(bus);
    
    /* Add elements to the pipeline including queues */
    gst_bin_add_many(GST_BIN(pipeline), 
                    source, capsfilter1, jpegdec, queue1, videoconvert, 
                    nvvidconv1, queue2, capsfilter2, streammux, queue3, 
                    nvinfer, queue4, nvvidconv2, tiler, queue5, 
                    nvvidconv3, nvosd, queue6, nvvidconv4, capsfilter3, sink, NULL);
    
    /* Link the camera capture to streammux with queues for buffering */
    if (!gst_element_link_many(source, capsfilter1, jpegdec, queue1, videoconvert, nvvidconv1, 
                              queue2, capsfilter2, NULL)) {
        g_printerr("Elements could not be linked (1). Exiting.\n");
        return -1;
    }
    
    /* Link the streammux sink pad */
    GstPad *sinkpad = gst_element_get_request_pad(streammux, "sink_0");
    GstPad *srcpad = gst_element_get_static_pad(capsfilter2, "src");
    GstPadLinkReturn ret = gst_pad_link(srcpad, sinkpad);
    if (GST_PAD_LINK_FAILED(ret)) {
        g_printerr("Failed to link capsfilter2 to streammux. Exiting.\n");
        return -1;
    }
    gst_object_unref(sinkpad);
    gst_object_unref(srcpad);
    
    /* Link the inference and post-processing path with queues for buffering */
    if (!gst_element_link_many(streammux, queue3, nvinfer, queue4, nvvidconv2, tiler, 
                              queue5, nvvidconv3, nvosd, queue6, nvvidconv4, 
                              capsfilter3, sink, NULL)) {
        g_printerr("Elements could not be linked (2). Exiting.\n");
        return -1;
    }
    
    /* Set the pipeline to playing state */
    g_print("Starting pipeline...\n");
    gst_element_set_state(pipeline, GST_STATE_PLAYING);
    
    /* Run the main loop */
    g_main_loop_run(loop);
    
    /* Free resources */
    g_print("Cleaning up...\n");
    gst_element_set_state(pipeline, GST_STATE_NULL);
    gst_object_unref(GST_OBJECT(pipeline));
    g_main_loop_unref(loop);
    
    return 0;
}
